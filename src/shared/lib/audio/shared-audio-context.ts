/**
 * –ï–¥–∏–Ω—ã–π AudioContext –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ AudioContext
 */
export class SharedAudioContextManager {
  private static instance: SharedAudioContextManager | null = null;
  private audioContext: AudioContext | null = null;

  private constructor() {}

  public static getInstance(): SharedAudioContextManager {
    if (!SharedAudioContextManager.instance) {
      SharedAudioContextManager.instance = new SharedAudioContextManager();
    }
    return SharedAudioContextManager.instance;
  }

  public async getAudioContext(): Promise<AudioContext> {
    if (!this.audioContext) {
      await this.initializeAudioContext();
    }

    return this.audioContext!;
  }

  private async initializeAudioContext(): Promise<void> {
    if (typeof AudioContext === "undefined") {
      throw new Error("AudioContext is not supported in this browser");
    }

    try {
      // –ï–¥–∏–Ω—ã–π sample rate 22050Hz –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º "playback" latencyHint –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–º
      this.audioContext = new AudioContext({
        sampleRate: 22050,
        latencyHint: "playback",
      });

      // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è)
      if (this.audioContext.state === "suspended") {
        console.log(
          "üîä AudioContext suspended, will resume on user interaction"
        );
      }
    } catch (error) {
      console.error("Failed to initialize shared AudioContext:", error);
      throw error;
    }
  }

  public async ensureAudioContextRunning(): Promise<boolean> {
    const context = await this.getAudioContext();

    if (context.state === "suspended") {
      try {
        console.log("üîä Resuming suspended AudioContext");
        await context.resume();
        console.log("üîä AudioContext resumed:", context.state);
      } catch (error) {
        console.error("Failed to resume AudioContext:", error);
        return false;
      }
    }

    return context.state === "running";
  }

  public async cleanup(): Promise<void> {
    if (this.audioContext) {
      try {
        await this.audioContext.close();
        console.log("üîä Shared AudioContext closed");
      } catch (error) {
        console.error("Error closing AudioContext:", error);
      } finally {
        this.audioContext = null;
      }
    }
  }
}
